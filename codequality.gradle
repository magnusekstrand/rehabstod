subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'
    apply plugin: 'com.github.hierynomus.license'

    configurations {
        buildtools
    }

    dependencies {
        buildtools "se.inera.intyg.common:common-build-tools:${intygCommonVersion}"
    }

    task unzipBuildTools(type: Copy) {
        into "$buildDir/build-tools/"
        from {
            configurations.buildtools.collect { zipTree(it) }
        }
    }


    checkstyle {
        config = resources.text.fromFile("${buildDir}/build-tools/checkstyle/checkstyle.xml")
        configProperties = ['package_name': 'rehabstod']
        ignoreFailures = false
        showViolations = true
    }

    checkstyleMain.onlyIf { project.hasProperty('codeQuality') }
    checkstyleMain.dependsOn unzipBuildTools
    checkstyleMain.source = "src/main/java"
    checkstyleTest.enabled = false

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.7.6.201602180812"
    }

    test {
        jacoco {
            destinationFile = file("$buildDir/jacoco/test.exec")
        }
    }

    findbugs {
        ignoreFailures = false
        effort = "max"
        reportLevel = "low"
        includeFilter = rootProject.file("tools/codeQuality/findbugsIncludeFilter.xml")
        sourceSets = [ sourceSets.main ]
    }
    tasks.withType(FindBugs) {
        reports {
            if (project.properties['findBugsHtmlOutput'] == "true") {
                xml.enabled = false
                html.enabled = true
            }
            else {
                xml.enabled = true
                html.enabled = false
            }
        }
    }
    findbugsMain.onlyIf { project.hasProperty('codeQuality') }
    findbugsTest.enabled = false

    pmd {
        ignoreFailures = false
        ruleSetFiles = rootProject.files("tools/codeQuality/pmdRuleSet.xml")
        ruleSets = []
        sourceSets = [ sourceSets.main ]
    }

    pmdMain.onlyIf { project.hasProperty('codeQuality') }
    pmdTest.enabled = false

    license {
        ext.url = 'https://github.com/sklintyg/rehabstod'
        ext.name = rootProject.name
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        strictCheck true
        header rootProject.file("header.txt")
        includes(["**/*.xml", "**/se/inera/**/*.java"])
    }

    licenseFormatMain.dependsOn unzipBuildTools
    licenseFormatTest.dependsOn unzipBuildTools

    licenseMain.onlyIf { project.hasProperty('codeQuality') }
    licenseTest.onlyIf { project.hasProperty('codeQuality') }
}

apply plugin: "org.sonarqube"

sonarqube {
    properties {
        property "sonar.jacoco.reportPath", "$buildDir/jacoco/test.exec"
        property "sonar.projectName", projectName
        property "sonar.projectKey", projectId
        property "sonar.host.url", System.properties['sonarUrl'] ?: "https://build-inera.nordicmedtest.se/sonar"
        property "sonar.test.exclusions", "src/test/**"
        property "sonar.exclusions", [
            "file:**/generatedSource/**",
            "src/main/java/se/inera/intyg/rehabstod/**/config/**",
            "**/stub/**",
            "**/exception/**",
            "**/*Exception*.java",
            "**/*Fake*.java"
            ]
        property "sonar.javascript.lcov.reportPath", "build/karma/lcov.info"
    }
}
