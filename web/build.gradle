apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.moowork.grunt'
apply plugin: 'idea'

sourceSets {
    restAssuredTest {
        java {
            compileClasspath += sourceSets.main.output + sourceSets.test.output
            runtimeClasspath += sourceSets.main.output + sourceSets.test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}
checkstyleRestAssuredTest.enabled = false

war.rootSpec.exclude "logback.xml"

configurations {
    restAssuredTestCompile.extendsFrom testCompile
    restAssuredTestRuntime.extendsFrom testRuntime
}

task restAssuredTest(type: Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: "http://localhost:8790/"

    testClassesDir = sourceSets.restAssuredTest.output.classesDir
    classpath = sourceSets.restAssuredTest.runtimeClasspath
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

idea {
    module {
        //and some extra test source dirs
        //scopes.TEST.plus += [ configurations.integrationTestCompile, configurations.integrationTestRuntime ]
        excludeDirs += file('node_modules')
        excludeDirs += file('src/main/webapp/bower_components')
    }
}

grunt {
    colors = true
}

node {
    version = '6.6.0'
    download = true
    distBaseUrl = 'https://build-inera.nordicmedtest.se/node/'
}

if (project.hasProperty('rehabstod.useMinifiedJavaScript')) {
    war {
        webAppDirName = 'build/webapp'
    }
    war.dependsOn grunt_build
}
else {
    war.dependsOn grunt_build_no_minify
}

war.dependsOn createVersionPropertyFile

task bowerInstall(type: NodeTask, dependsOn:npmInstall) {
    script = file('node_modules/bower/bin/bower')
    args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}/caches/bower/cache",
            "--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
            "--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
            'install']
    inputs.files file('bower.json')
    outputs.files file('src/main/webapp/bower_components')
}

grunt_build.dependsOn bowerInstall
grunt_build_no_minify.dependsOn bowerInstall

gretty {
    integrationTestTask = null
    httpPort = 8790
    contextConfigFile = "${projectDir}/src/main/resources/jetty-web.xml"
    contextPath = '/'
    logbackConfigFile = "${projectDir}/src/main/resources/logback.xml"
    jvmArgs = [
        '-Dspring.profiles.active=dev,rhs-it-stub,caching-enabled',
        '-Drehabstod.config.file=' + projectDir + '/src/main/resources/dev.properties',
        '-Dcredentials.file=' + projectDir + '/src/main/resources/dev-credentials.properties',
        '-Drehabstod.resources.folder=/' +projectDir + '/../src/main/resources',
        '-XX:MaxPermSize=256M',
        '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8011'
    ]

/***************** Konfiguration för att köra med SITHS och HSA aktiverat lokalt. *******************/
//    jvmArgs = [
//            '-Dspring.profiles.active=dev,rhs-security-test',
//            '-Drehabstod.config.folder=' + projectDir + '/../../rehabstod-konfiguration/demo',
//            '-Drehabstod.config.file=' + projectDir + '/../../rehabstod-konfiguration/demo/rehabstod.properties',
//            '-Dcredentials.file=' + projectDir + '/../../rehabstod-konfiguration/demo/credentials.properties',
//            '-Drehabstod.resources.folder=/' +projectDir + '/../src/main/resources'
//    ]
    fastReload = true
    inplaceMode = 'hard'
    scanInterval = 0
    enableNaming = true
}

dependencies {
    compile project(":rehabstod-common")
    compile project(":rehabstod-it-integration")

    compile "se.inera.intyg.infra:hsa-integration:${intygInfraVersion}"
    compile "se.inera.intyg.infra:log-messages:${intygInfraVersion}"
    compile "se.inera.intyg.infra:security-siths:${intygInfraVersion}"
    compile "se.inera.intyg.infra:common-cache-metrics:${intygInfraVersion}"

    compile "org.springframework:spring-webmvc:${springContextVersion}"
    compile "org.springframework:spring-jms:${springContextVersion}"
    compile "org.springframework.ws:spring-ws-core:${springWsCoreVersion}"
    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "org.springframework.security.extensions:spring-security-saml2-core:${springSecurityExtensionsVersion}"
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"

    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}" // was 2.4.4
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"  // was 2.4.4

    compile "com.googlecode.json-simple:json-simple:${jsonSimpleVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "ch.qos.logback:logback-classic:${logbackVersion}"
    compile "wsdl4j:wsdl4j:${wsdl4jVersion}"
    compile "commons-lang:commons-lang:${commonsLangVersion}"
    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"

    compile "se.riv.clinicalprocess.healthcond.monitoring:clinicalprocess-healthcond-monitoring-schemas:${internalMonitoringSchemaVersion}"

    compile "org.apache.cxf:cxf-rt-frontend-jaxws:${cxfVersion}"
    compile "org.apache.cxf:cxf-rt-transports-http:${cxfVersion}"

    compile "org.apache.poi:poi:${poiVersion}"
    compile "org.apache.poi:poi-ooxml:${poiVersion}"
    compile "com.itextpdf:itextpdf:${itextVersion}"

    providedCompile "javax.jms:jms-api:${javaxJmsVersion}"
    providedCompile "javax.servlet:javax.servlet-api:${javaxServletVersion}"
    providedCompile "jstl:jstl:${jstlVersion}"

    testCompile "com.jayway.restassured:rest-assured:${restAssuredVersion}"
    testCompile "com.jayway.restassured:json-schema-validator:${restAssuredVersion}"

    testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testCompile ("junit:junit:${junitVersion}") {
        exclude module : "hamcrest"
        exclude module : "hamcrest-core"
    }
    testCompile "org.mockito:mockito-all:${mockitoAllVersion}"
    testCompile "org.powermock:powermock-mockito-release-full:${powermockFullVersion}"

    testCompile "org.springframework:spring-test:${springContextVersion}"
    testCompile "org.unitils:unitils-core:${unitilsCoreVersion}"

    gretty "org.apache.activemq:activemq-client:${activemqVersion}"
    gretty "org.apache.activemq:activemq-broker:${activemqVersion}"
}
